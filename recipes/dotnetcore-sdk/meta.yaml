# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "dotnetcore-sdk" %}
{% set version = "3.1.100" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://dot.net/v1/dotnet-install.sh # [not win]
    sha256: 7cf038c274862c160c2fe8cfc0ea7471b48d1ac05cb201b7717d53354ccd139c # [not win]
  - url: https://dot.net/v1/dotnet-install.ps1 # [win]
    sha256: 71a888f99a73936de8cbcc494df2706f77a69a98a9962a0351052c350f95be39 # [win]
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # script: "{{ PYTHON }} -m pip install . -vv"
  detect_binary_files_with_prefix: False

test: {}
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  
about:
  home: https://github.com/dotnet/core-sdk
  license: MIT
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Simple, fast, extensible JSON encoder/decoder for Python'

  # The remaining entries in this section are optional, but recommended.
  description: |
    simplejson is a simple, fast, complete, correct and extensible
    JSON <https://json.org> encoder and decoder for Python 2.5+ and
    Python 3.3+. It is pure Python code with no dependencies, but includes
    an optional C extension for a serious speed boost.
  doc_url: https://simplejson.readthedocs.io/
  dev_url: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - cgranade
